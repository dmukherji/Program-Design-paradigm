<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html> <head>
<title>CS 5010: Problem Set 3</title>
<link type="text/css" rel="stylesheet" href="course.css">
<link type="text/css" rel="stylesheet" href="problem-sets.css">
</head>

<body>
<h1>CS 5010: Problem Set 3</h1>

<!-- Be sure to change the problem set number both in the title and -->
<!-- the h1! -->

<p>
<strong>Out:</strong> Tuesday, October 2, 2012

<p><strong>Due:</strong> Wednesday, October 10, 2012
</p>

<p>
The goal of this problem set is to help you design and use
abstractions, and to use pre-defined abstractions.
</p>

<p>Remember that you must follow the design recipe. </p>

<p>You must use DrRacket's HtDP Intermediate Student Language with
  Lambda.</p>

<p>Your tests must use the <kbd>rackunit</kbd> framework.</p>

<hr>

<h2>Finger Exercises/Drill Problems:</h2>

<ul>
  <li>Section 6.3.5 of HtDP2 contains a large number of finger
  exercises for using HOFC.  Do at least a few of these.</li>
</ul>


<hr>

<h2>Required Exercises</h2>

<ol>    
  <li> (Balls in a Box).  Rewrite your solution to this question from
  last week's problem set, replacing all your structural decompositions
  on lists with higher-order function composition using the pre-defined
  abstractions.

  <p>Be sure to fix any deficiencies that were detected in
  last week's code walk: make sure you have a good data definition for
  Direction, fix your templates, make sure your code follows the
  template, etc.
  </p>
  
  <p>For this week, we have two additional requirements:  </p>
  
  <ul>
    <li> You should be able to change the speed of the ball by making
    exactly one change in your file.</li>

    <li> You can drag the ball by clicking on it, much like the
    draggable rectangle in last week's problem set.  When a ball is
    selected, it should be displayed in outline green (or in some color
    different from the color of an unselected ball).  You should not
    display the position of the mouse inside the ball the way you did
    for the draggable rectangle.  But the rest of the specification for
    dragging is like it was for the draggable rectangle: Once the ball
    has been selected, you should be able to drag it around the Universe
    canvas with the mouse.  As you drag it, the position of the mouse
    within the ball should not change.  When the mouse button is
    released, the ball should go back to its unselected state (outline
    red) in its new location.  You must provide the function
    <kbd>world-after-mouse-event</kbd>. 
    </li>

  </ul>

  </li>

<!-- FOR NEXT TIME: -->
<!--   Need to specify that shipments arrive in the afternoon and are -->
<!--   placed in stock overnight, so 0 means that a shipment is expected -->
<!--   today, and the books will be available for filling orders -->
  <!--   tomorrow.

  Also: change stock-total-value to stock-total-potential-profit

  -->


  <li>Design a set of functions for manipulating the inventory of a
  bookstore, represented as a list of books.  For each book, we must
  maintain the following information:</p>

  <ul>
    <li> isbn, a number (the "international standard book number").
    This serves as a unique identifier for this book.</li>
    <li> title, a string</li>
    <li> author, a string </li>
    <li> publisher, a string</li>
    <li> unit price: a number, the price at which we will sell the book</li>
    <li> unit cost: a number, the cost of the book to the bookstore</li>
    <li> number of copies on hand</li>
    <li> re-order status.  Our bookstore periodically reorders books
    from the publisher.  For each book, there is at most one
    outstanding reorder.  If there is no reorder, the reorder
    status must represent this information. If there is an order, the
    order status 
    contains the number of days until the the next shipment
    of this book is expected to arrive, and the number of copies
    expected to arrive at that time. </li>
    <li> cuft: the volume taken up by one unit of this item, in cubic
    feet.</li> 
  </ul>

  <p>You also need to deal with orders.  An order is a list of line
  items.  A line item consists of a ISBN and the quantity ordered. Here
  is an example of an order; each line of the table is a line item.
  Here is an example of how an order might be displayed as a
  table.</p>

  <table>
  <tr><th>ISBN</th><th align="right">Quantity</th></tr>
  <tr>
    <td>45861387</td>
    <td align="right">3</td>
  </tr>
  <tr>
    <td>19968208</td>
    <td align="right">15</td>
  </tr>
  <tr>
    <td>30581274</td>
    <td align="right">10</td>
  </tr>
  </table>


  <p>Also, for this problem, we introduce the Data Definition
<kbd>MaybeNumber</kbd> :

<pre>
;; A MaybeNumber is one of:
;; -- Number
;; -- false
</pre>
</p>

<p>Design the following functions.  For each function, first design
  the function without using abstractions.  Then recode the function
  using abstractions like those on page 300.  Be sure to test your
  abstract versions by commenting out your originals using <kbd>#;</kbd>
  and re-running your existing tests, as described in class.  Leave your
  solution in a state in which the versions using abstractions are the
  active ones.</p>

  <p>All functions that return an inventory should return an inventory
  with the books in the same order they were in the argument. </p>

  <p>Your solution should provide the following functions:</p>

<pre>
stock-total-value : Inventory -&gt;  Number
Returns the total profit for all the items in stock (i.e., how much
the bookstore would profit if it sold every book in stock).

stock-total-volume : Inventory -&gt; Number
Returns the total volume needed to store all the books in stock.

price-for-line-item : Inventory LineItem -&gt; MaybeNumber
Takes an inventory and a line item and returns the price for that line
item (the quantity times the unit price for that item).  Returns false
if that isbn does not exist in the inventory.

fillable-now? : Order Inventory -> Boolean.
Given an order and an inventory, returns true iff there are enough
copies of each book on hand to fill the order.  If the order contains
a book that is not in the inventory, then the order is not fillable.

days-til-fillable : Order Inventory -> MaybeNumber
Given an inventory and an order, returns the number of days until
the order is fillable, assuming all the shipments come in on time.
Returns false if there won't be enough copies of some book, even
after the next shipment of that book comes in.

price-for-order : Inventory Order -&gt; Number
Returns the total price for the given order.  The price does not
depend on whether any particular line item is in stock.  Line items
for an ISBN that is not in the inventory count as 0.

inventory-after-order : Inventory Order -> Inventory.
Given an order that is fillable now, returns the inventory after the
order has been filled. 

increase-prices : Inventory String Number -> Inventory
Takes an inventory, a publisher, and a percentage, and returns an
inventory like the original, except that all items by that publisher
have their unit prices increased by the specified percentage.  For
example, <kbd>(increase-prices inventory1 "MIT Press" 10)</kbd> increases the
prices of all MIT Press books in the inventory by 10%.

daily-update : Inventory -> Inventory.
Given an inventory, gives the starting inventory for the next day,
assuming that each shipment that was due today (that is, those with a
re-order status showing 0 days) actually arrived.  If a reorder
arrives, then there will no longer be an outstanding reorder.

Also provide the functions
make-book  (9 arguments)
make-line-item (2 arguments)
The arguments to these functions should appear in the same order as
they do in the problem statement.

reorder-present? : ReorderStatus -> Boolean
Returns true iff the given ReorderStatus shows a pending re-order.

empty-reorder : Any -> ReorderStatus
Ignores its argument and produces a ReorderStatus showing no pending
re-order.

make-reorder : Number Number -> ReorderStatus
Given a number of days and a number of copies, produces a
ReorderStatus with the given data.
</pre>

  </ol>
<hr>
<address></address>
<font size=-1>
<p align=right>
<!-- hhmts start -->
Last modified: Tue Oct 09 13:39:28 -0400 2012 <!-- hhmts end -->
</body> </html>
